---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Vejle mod Hudcancer (VMH) Website

## Project Overview

This is the official website for "Vejle mod hudcancer" (VMH), a Danish non-profit association fighting skin cancer since 2017. The website serves as the primary platform for fundraising, education, transparency, and community engagement.

### Technology Stack

- Next.js 15 with App Router
- TypeScript for type safety
- Tailwind CSS v4 for styling
- shadcn/ui for component library
- Zustand for state management
- Zod for schema validation and type safety
- TanStack Query for server state management
- TanStack Table for data tables
- Sanity CMS for content management
- React Server Components
- Payment integration for donations

### Key Website Objectives

1. **Fundraising**: Secure online donation system (one-time & recurring)
2. **Transparency**: Showcase funded projects and their measurable results
3. **Education**: Provide comprehensive skin cancer information
4. **Event Promotion**: Manage and promote annual gala and Torveevent
5. **Trust Building**: Demonstrate credibility and community impact

### Target Audience

- **Primary**: Adults 30+ affected by skin cancer (personally or through family/friends)
- **Secondary**: Local businesses and sponsors seeking community involvement
- **Extended**: Individuals unable to attend events but wanting to contribute

## Code Style & Standards

### TypeScript

- Use TypeScript for all new files
- Prefer type imports: `import type { ComponentProps } from 'react'`
- Use interface declarations for object shapes
- Leverage strict TypeScript configuration
- Define proper types for Sanity schema objects
- Use Zod for runtime schema validation and type inference
- Prefer Zod schemas over manual type definitions for forms and API validation

### React & Next.js

- Use React Server Components by default
- Only add 'use client' when client-side features are needed
- Prefer async/await over promises
- Use Next.js 15 App Router conventions
- Implement proper error boundaries and loading states

### State Management

- Use Zustand for client-side state management
- Keep state stores minimal and focused
- Use Zustand with TypeScript for type safety
- Prefer server state (React Server Components) over client state when possible
- Use Zustand stores for UI state, user preferences, and form state

### Server State Management

- Use TanStack Query for server state management and caching
- Implement TanStack Query for Sanity CMS data fetching when client-side updates are needed
- Use TanStack Query for real-time donation tracking and project updates
- Leverage TanStack Query's caching and invalidation for optimal performance
- Combine with React Server Components for initial server-side data loading

### Data Tables

- Use TanStack Table for complex data tables (donations, projects, sponsors)
- Implement proper TypeScript types for table columns and data
- Use TanStack Table with shadcn/ui table components for consistent styling
- Implement sorting, filtering, and pagination for large datasets
- Consider TanStack Virtual for performance with large data sets

### Sanity Integration

- Use `next-sanity` for data fetching
- Implement proper GROQ queries with type safety
- Use `@sanity/image-url` for image optimization
- Cache Sanity queries appropriately with Next.js caching

## Directory Structure

### Required Structure

```
src/
├── app/                    # Next.js App Router
│   ├── layout.tsx         # Root layout
│   ├── page.tsx           # Home page
│   ├── globals.css        # Global styles
│   └── [routes]/          # Dynamic routes
├── modules/               # Main modules directory
│   ├── components/        # Reusable UI components
│   │   ├── ui/           # Base UI components (shadcn components, buttons, inputs, etc.)
│   │   ├── layout/       # Layout components organized by feature
│   │   │   ├── header/   # Header-related components
│   │   │   ├── footer/   # Footer-related components
│   │   │   ├── navigation/ # Navigation-related components
│   │   │   └── sidebar/  # Sidebar-related components
│   │   └── content/      # Content-specific components organized by feature
│   │       ├── hero/     # Hero section components
│   │       ├── cards/    # Card components
│   │       ├── forms/    # Form components
│   │       ├── tables/   # Table components
│   │       └── modals/   # Modal components
│   ├── hooks/            # Custom React hooks
│   ├── utils/            # Utility functions
│   ├── types/            # TypeScript type definitions
│   ├── lib/              # Library configurations and helpers
│   └── constants/        # Application constants
└── sanity/               # Sanity CMS configuration
    ├── client.ts         # Sanity client setup
    ├── schemas/          # Content schemas
    ├── queries/          # GROQ queries
    └── types.ts          # Generated Sanity types
```

## File Naming Conventions

- Use kebab-case for directories and React components: `user-profile/`
- Use camelCase for utilities and hooks: `formatDate.ts`, `useAuth.ts`
- Use SCREAMING_SNAKE_CASE for constants: `API_ENDPOINTS.ts`

## Component Guidelines

### Component Structure

```tsx
// Component imports
import type { ComponentProps } from "react";

// Type definitions
interface UserProfileProps {
  user: User;
  className?: string;
}

// Component implementation
export default function UserProfile({ user, className }: UserProfileProps) {
  return <div className={className}>{/* component content */}</div>;
}
```

### Component Organization

- Keep components small and focused (single responsibility)
- Extract complex logic into custom hooks
- Use composition over inheritance
- Implement proper prop validation with TypeScript

#### Component Directory Structure Rules

- **ui/**: Reserved for shadcn/ui components and general global UI primitives (buttons, inputs, dialogs, etc.)
- **layout/**: Organized by feature with dedicated subdirectories:
  - `header/`: All header-related components (logo, navigation items, user menu, etc.)
  - `footer/`: Footer components (links, social media, contact info, etc.)
  - `navigation/`: Navigation-specific components (breadcrumbs, menu items, etc.)
  - `sidebar/`: Sidebar and drawer components
- **content/**: Feature-specific content components organized by type:
  - `hero/`: Hero sections and landing page components
  - `cards/`: All card-type components (project cards, team cards, etc.)
  - `forms/`: Form components (donation forms, contact forms, etc.)
  - `tables/`: Table components for data display
  - `modals/`: Modal and dialog content components

#### Naming Convention for Subdirectories

- Each subdirectory should contain an `index.ts` file for clean exports
- Component files should be descriptive: `donation-form.tsx`, `project-card.tsx`
- Related components can be grouped in the same subdirectory

## Styling Guidelines

### Tailwind CSS

- Use Tailwind utility classes
- Create custom components for repeated patterns
- Use CSS variables for theme customization
- Implement responsive design with Tailwind breakpoints
- Prefer Tailwind over custom CSS when possible
- Use shadcn/ui as the primary component library
- Follow shadcn/ui component patterns and customization guidelines

### Class Organization

- Group classes logically: layout, spacing, colors, typography
- Use clsx or cn utility for conditional classes
- Extract complex class combinations into constants

## VMH-Specific Content Structure

### Core Website Sections

1. **Home/Landing**: Hero section with mission statement and impact statistics
2. **Donation System**: One-time and recurring payment options with donor recognition
3. **Projects & Results**: Detailed showcase of funded projects with amounts and outcomes
4. **Skin Cancer Education**: Comprehensive information (causes, symptoms, prevention, treatment)
5. **Events**: Gala and Torveevent information with booking functionality
6. **About Us**: Mission, vision, values, and team information
7. **Corporate Sponsors**: Dedicated section for business partnerships

### Key Metrics to Display

- **3.4 million DKK** raised since 2017
- **5 major projects** funded
- **Annual events** with participation numbers
- **Community impact** statistics

## Sanity CMS Guidelines

### Required Schemas

Define these content types in Sanity:

```typescript
// Core schemas needed
- Project: title, description, funding_goal, amount_raised, status, results, images
- Event: title, date, location, description, booking_info, capacity
- EducationalContent: title, content, category, images
- TeamMember: name, role, bio, image
- Sponsor: name, logo, tier, description
- Donation: amount, type, donor_info (for recognition)
- NewsUpdate: title, content, date, featured_image
```

### Data Fetching

- Use Server Components for data fetching when possible
- Implement proper error handling for Sanity queries
- Cache queries appropriately with Next.js caching strategies
- Use TypeScript for GROQ query results
- Consider Danish language content support

### Schema Management

- Define schemas with proper validation
- Use consistent naming conventions
- Document schema fields properly
- Implement proper references between content types
- Include SEO fields for all content types

## Performance Guidelines

- Implement proper image optimization with Next.js Image component
- Use Sanity's image optimization features
- Implement proper caching strategies
- Use React.memo for expensive components
- Implement proper loading states and error boundaries

## Import Guidelines

- Use absolute imports with `@/` prefix
- Group imports: React, third-party, local
- Use type imports when importing only types
- Prefer named exports over default exports for utilities

### Import Order

```tsx
// React imports
import { Suspense } from "react";
import type { Metadata } from "next";

// Third-party imports
import { groq } from "next-sanity";
import { z } from "zod";
import { create } from "zustand";
import { useQuery } from "@tanstack/react-query";
import { useReactTable } from "@tanstack/react-table";

// Local imports
import { sanityClient } from "@/sanity/client";
import { Button } from "@/modules/components/ui/button";
import type { Post } from "@/modules/types/sanity";
```

## Error Handling

- Implement proper error boundaries
- Use Next.js error.tsx files for route-level errors
- Provide meaningful error messages
- Log errors appropriately for debugging

## Testing Guidelines

- Write unit tests for utility functions
- Test components with realistic props
- Mock Sanity client for testing
- Use React Testing Library conventions

## Form Validation & Data Validation

- Use Zod for all form validation schemas
- Define Zod schemas for API request/response validation
- Use Zod with React Hook Form for form handling
- Consider TanStack Form for complex forms with advanced features
- Implement client-side and server-side validation with the same Zod schemas
- Use Zod's `safeParse` for error handling in API routes

## Security Guidelines

- Validate all user inputs using Zod schemas
- Use environment variables for sensitive data
- Implement proper CORS policies
- Sanitize content from Sanity when needed

## Performance Monitoring

- Use Next.js built-in performance metrics
- Monitor Core Web Vitals
- Implement proper SEO optimization
- Use proper meta tags and structured data

## VMH-Specific Implementation Guidelines

### Donation System Requirements

- Implement secure payment processing
- Support both one-time and recurring donations
- Include donor recognition system (thank you letters/certificates)
- Provide donation amount flexibility
- Ensure GDPR compliance for donor data
- Display real-time funding progress for projects

### Event Management Features

- Event booking/reservation system
- Calendar integration for Gala and Torveevent
- Capacity management
- Email confirmation system
- Event information display (date, time, location)

### Educational Content Structure

- **What is skin cancer**: Definitions and types (basal cell, squamous cell carcinoma)
- **Causes**: UV radiation, tanning beds, sun exposure
- **Symptoms**: Persistent sores, firm nodules, visual guides
- **Prevention**: Sun safety (shade, sunscreen SPF 30+, avoid 12-3 PM sun)
- **Treatment**: Surgery, radiation therapy, other options

### Language and Localization

- Primary language: Danish
- Use appropriate Danish terminology for medical content
- Consider accessibility for Danish users
- Format currency as DKK
- Use Danish date/time formats

### Design Principles

- Professional, trustworthy appearance
- Clear call-to-action for donations
- Easy navigation for older demographics (30+)
- Mobile-responsive for all users
- High contrast and readable fonts
- Prominent display of impact metrics

### Component Priorities

1. **donation-form**: Secure, user-friendly donation interface (TanStack Form + Zod)
2. **project-showcase**: Visual display of funded projects and results (TanStack Query)
3. **event-calendar**: Upcoming events with booking functionality
4. **impact-metrics**: Statistics display (amounts raised, projects funded) (TanStack Query)
5. **educational-cards**: Skin cancer information in digestible format
6. **sponsor-gallery**: Corporate partner recognition (TanStack Table for admin)
7. **team-profiles**: About us section with team members

### TanStack Integration for VMH

- **TanStack Query**: Real-time donation tracking, project funding progress, event capacity updates
- **TanStack Table**: Admin dashboards for donation management, sponsor listings, project tracking
- **TanStack Form**: Complex donation forms, event registration, contact forms
- **TanStack Virtual**: Large donor lists, extensive educational content, sponsor galleries

Remember to:

- Follow the established directory structure
- Use TypeScript consistently
- Implement proper error handling
- Follow Next.js 15 and React best practices
- Optimize for performance and SEO
- Prioritize accessibility and user trust
- Maintain transparency in all communications
- Focus on clear value proposition for donors
